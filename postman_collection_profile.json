{
	"info": {
		"_postman_id": "profile-settings-collection-2025",
		"name": "UniTrack Profile Settings API",
		"description": "Comprehensive collection for testing UniTrack profile management endpoints for both teachers and admins. Includes authentication, profile retrieval, and profile updates with complete validation scenarios.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "profile-settings"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login Teacher",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('teacher_token', response.token);",
									"        pm.environment.set('teacher_id', response.user.id);",
									"        pm.environment.set('teacher_email', response.user.email);",
									"        console.log('Teacher token saved to environment');",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{teacher_email}}\",\n    \"password\": \"{{teacher_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.token) {",
									"        pm.environment.set('admin_token', response.token);",
									"        pm.environment.set('admin_id', response.user.id);",
									"        pm.environment.set('admin_email', response.user.email);",
									"        console.log('Admin token saved to environment');",
									"    }",
									"}",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{admin_email}}\",\n    \"password\": \"{{admin_password}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication endpoints to get JWT tokens for testing profile routes."
		},
		{
			"name": "Profile Management - Teacher",
			"item": [
				{
					"name": "Get Teacher Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has success property', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"});",
									"",
									"pm.test('Response has teacher data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('role', 'teacher');",
									"    pm.expect(jsonData.data).to.have.property('email_verified');",
									"});",
									"",
									"pm.test('Response does not contain password', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.not.have.property('password_hash');",
									"    pm.expect(jsonData.data).to.not.have.property('password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teacher Name Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Profile updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('message', 'Profile updated successfully');",
									"});",
									"",
									"pm.test('Name was updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.changes).to.have.property('name_updated', true);",
									"    pm.expect(jsonData.changes).to.have.property('password_updated', false);",
									"    pm.expect(jsonData.data).to.have.property('name', 'Updated Teacher Name');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Updated Teacher Name\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teacher Password Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Password updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.changes).to.have.property('password_updated', true);",
									"    pm.expect(jsonData.changes).to.have.property('name_updated', false);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"{{teacher_password}}\",\n    \"newPassword\": \"NewTeacherPass123\",\n    \"confirmPassword\": \"NewTeacherPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Teacher Name and Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Both name and password updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.changes).to.have.property('name_updated', true);",
									"    pm.expect(jsonData.changes).to.have.property('password_updated', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Dr. Updated Teacher\",\n    \"currentPassword\": \"NewTeacherPass123\",\n    \"newPassword\": \"FinalTeacherPass123\",\n    \"confirmPassword\": \"FinalTeacherPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Profile management endpoints for teacher users."
		},
		{
			"name": "Profile Management - Admin",
			"item": [
				{
					"name": "Get Admin Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has admin data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('name');",
									"    pm.expect(jsonData.data).to.have.property('email');",
									"    pm.expect(jsonData.data).to.have.property('role', 'admin');",
									"    pm.expect(jsonData.data).to.have.property('is_super_admin');",
									"    pm.expect(jsonData.data).to.have.property('status');",
									"    pm.expect(jsonData.data).to.have.property('permissions');",
									"});",
									"",
									"pm.test('Admin has permissions array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.permissions).to.be.an('array');",
									"    pm.expect(jsonData.data.permissions.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Admin Name Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Admin name updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.changes).to.have.property('name_updated', true);",
									"    pm.expect(jsonData.data).to.have.property('name', 'Senior Administrator');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Senior Administrator\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Admin Password Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Admin password updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData.changes).to.have.property('password_updated', true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"{{admin_password}}\",\n    \"newPassword\": \"NewAdminPass123\",\n    \"confirmPassword\": \"NewAdminPass123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Profile management endpoints for admin users."
		},
		{
			"name": "Validation Tests",
			"item": [
				{
					"name": "Invalid Name - Too Short",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Validation error for short name', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error', 'Validation failed');",
									"    pm.expect(jsonData.details).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"A\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Weak Password Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Password complexity validation', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error', 'Validation failed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"FinalTeacherPass123\",\n    \"newPassword\": \"weak\",\n    \"confirmPassword\": \"weak\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password Confirmation Mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Password confirmation mismatch error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error', 'Validation failed');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"FinalTeacherPass123\",\n    \"newPassword\": \"ValidPassword123\",\n    \"confirmPassword\": \"DifferentPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wrong Current Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Invalid current password error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error', 'Invalid current password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"WrongPassword123\",\n    \"newPassword\": \"ValidPassword123\",\n    \"confirmPassword\": \"ValidPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Current Password for Password Change",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('Current password required error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error', 'Current password required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"newPassword\": \"ValidPassword123\",\n    \"confirmPassword\": \"ValidPassword123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Empty Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test('No changes provided error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error', 'No changes provided');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{teacher_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthorized Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 401', function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test('Unauthorized error', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"profile"
							]
						}
					},
					"response": []
				}
			],
			"description": "Comprehensive validation tests for edge cases and error scenarios."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default environment variables if not set",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:5000');",
					"}",
					"",
					"if (!pm.environment.get('teacher_email')) {",
					"    pm.environment.set('teacher_email', 'muhammedabiodun42@gmail.com');",
					"}",
					"",
					"if (!pm.environment.get('teacher_password')) {",
					"    pm.environment.set('teacher_password', 'Balikiss124');",
					"}",
					"",
					"if (!pm.environment.get('admin_email')) {",
					"    pm.environment.set('admin_email', 'louisdiaz43@gmail.com');",
					"}",
					"",
					"if (!pm.environment.get('admin_password')) {",
					"    pm.environment.set('admin_password', 'Balikiss12');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test for response time",
					"pm.test('Response time is less than 2000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"// Global test for content type on successful responses",
					"if (pm.response.code >= 200 && pm.response.code < 300) {",
					"    pm.test('Content-Type is application/json', function () {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "teacher_email",
			"value": "muhammedabiodun42@gmail.com",
			"type": "string"
		},
		{
			"key": "teacher_password",
			"value": "balikiss12",
			"type": "string"
		},
		{
			"key": "admin_email",
			"value": "louisdiaz43@gmail.com",
			"type": "string"
		},
		{
			"key": "admin_password",
			"value": "Balikiss12",
			"type": "string"
		}
	]
}
